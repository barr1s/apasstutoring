/* jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed */
!function(t){function e(t,e,n){return"string"==typeof t&&("%"==t.slice(-1)?t=parseInt(t.substring(0,t.length-1))/100*e:"vh"==t.slice(-2)?t=parseInt(t.substring(0,t.length-2))/100*n:"px"==t.slice(-2)&&(t=parseInt(t.substring(0,t.length-2)))),t}var n=t(window),i=1,o={};n.on("scroll",function(){var e=n.scrollTop();t.map(o,function(t){window.clearTimeout(t.timeoutId),t.timeoutId=window.setTimeout(function(){t.handler(e)},t.options.delay)})}).on("load",function(){n.trigger("scroll")}),jQuery.fn.scrollex=function(l){var s=t(this);if(0==this.length)return s;if(this.length>1){for(var r=0;r<this.length;r++)t(this[r]).scrollex(l);return s}if(s.data("_scrollexId"))return s;var a,u,h,c,p;switch(a=i++,u=jQuery.extend({top:0,bottom:0,delay:0,mode:"default",enter:null,leave:null,initialize:null,terminate:null,scroll:null},l),u.mode){case"top":h=function(t,e,n,i,o){return t>=i&&o>=t};break;case"bottom":h=function(t,e,n,i,o){return n>=i&&o>=n};break;case"middle":h=function(t,e,n,i,o){return e>=i&&o>=e};break;case"top-only":h=function(t,e,n,i,o){return i>=t&&n>=i};break;case"bottom-only":h=function(t,e,n,i,o){return n>=o&&o>=t};break;default:case"default":h=function(t,e,n,i,o){return n>=i&&o>=t}}return c=function(t){var i,o,l,s,r,a,u=this.state,h=!1,c=this.$element.offset();i=n.height(),o=t+i/2,l=t+i,s=this.$element.outerHeight(),r=c.top+e(this.options.top,s,i),a=c.top+s-e(this.options.bottom,s,i),h=this.test(t,o,l,r,a),h!=u&&(this.state=h,h?this.options.enter&&this.options.enter.apply(this.element):this.options.leave&&this.options.leave.apply(this.element)),this.options.scroll&&this.options.scroll.apply(this.element,[(o-r)/(a-r)])},p={id:a,options:u,test:h,handler:c,state:null,element:this,$element:s,timeoutId:null},o[a]=p,s.data("_scrollexId",p.id),p.options.initialize&&p.options.initialize.apply(this),s},jQuery.fn.unscrollex=function(){var e=t(this);if(0==this.length)return e;if(this.length>1){for(var n=0;n<this.length;n++)t(this[n]).unscrollex();return e}var i,l;return(i=e.data("_scrollexId"))?(l=o[i],window.clearTimeout(l.timeoutId),delete o[i],e.removeData("_scrollexId"),l.options.terminate&&l.options.terminate.apply(this),e):e}}(jQuery);

/*
JQuery plugin that allows for scroll-based event handling, specifically targeting elements
as they enter and leave the viewport

It's commonly used for animating elements or triggering actions based on scroll position.

How It Works
This plugin monitors the scroll position of the page and determines whether specific elements are within a certain range (based on top/bottom offset). The primary features of the plugin include configuring entry and exit points, handling scrolling events, and setting up callback functions for actions upon entering, leaving, initializing, and terminating the scroll effect.

Code Breakdown
Helper Function - e(t, e, n):

Converts a dimension (e.g., 50%, 50vh, 50px) to a numerical value in pixels. It takes three parameters:
t: The dimension as a string.
e: The reference size in pixels for percentages.
n: The viewport height for vh units.
This function returns the converted pixel value for consistent measurement.
Main Scroll Event Listener:

A scroll event listener on the window triggers when the page is scrolled, iterating over all registered elements in the o object.
Each element has a handler function, which is executed with a delay specified by the options.
scrollex Initialization (jQuery.fn.scrollex):

This method initializes the scroll behavior for selected elements based on provided options.
Options:
top and bottom: Offsets from the top and bottom of the element.
delay: Delay in milliseconds for scroll detection.
mode: Defines how the element’s visibility is determined. Modes include "top", "bottom", "middle", "top-only", "bottom-only", and "default".
enter, leave, initialize, terminate, scroll: Callback functions triggered on element entry, exit, initialization, termination, or during scroll.
Modes:
Each mode determines the conditions under which an element is considered visible in the viewport. The h function varies based on the mode to define these conditions.
Handler Function (c):

Calculates visibility by comparing the scroll position (t) with the element’s position (r and a, adjusted by top and bottom offsets).
Calls enter and leave callbacks when the element's visibility state changes.
Calls the scroll callback with the element’s scroll progress, as a ratio of visibility in the viewport.
unscrollex Method:

This method removes the scroll effect and clears any associated data and timeout IDs, effectively stopping scrollex for the selected element(s).

// Apply Scrollex to an element
$('#my-element').scrollex({
    mode: 'middle',          // Element is considered visible when its middle is within the viewport
    top: '10%',               // Start the effect when 10% of the element is visible from the top
    bottom: '10%',            // End the effect when 10% of the element is visible from the bottom
    delay: 50,                // Delay between checks (in ms)
    enter: function() {       // Called when the element enters the viewport
        $(this).addClass('visible');
    },
    leave: function() {       // Called when the element leaves the viewport
        $(this).removeClass('visible');
    }
});

Key Benefits
Flexible Scroll Effects: Provides options to control visibility events, making it useful for animating elements or creating effects triggered by scrolling.
Customizable Entry and Exit Points: Adjust the timing and offset of visibility checks based on user-defined top and bottom values.
Performance Optimization: Includes delayed handling and a timeout mechanism to avoid excessive recalculations during scrolling.
Summary
jquery.scrollex is a lightweight library that simplifies handling scroll-based events, offering a high level of customization for triggering animations or other actions when elements scroll into view. This is especially useful for single-page applications, landing pages, or websites with interactive scrolling effects.
*/