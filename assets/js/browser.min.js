/* browser.js v1.0.1 | @ajlkn | MIT licensed */
var browser=function(){"use strict";var t={name:null,version:null,os:null,osVersion:null,touch:null,mobile:null,_canUse:null,canUse:function(e){t._canUse||(t._canUse=document.createElement("div"));var n=t._canUse.style,r=e.charAt(0).toUpperCase()+e.slice(1);return e in n||"Moz"+r in n||"Webkit"+r in n||"O"+r in n||"ms"+r in n},init:function(){for(var e=navigator.userAgent,n="other",r=0,i=[["firefox",/Firefox\/([0-9\.]+)/],["bb",/BlackBerry.+Version\/([0-9\.]+)/],["bb",/BB[0-9]+.+Version\/([0-9\.]+)/],["opera",/OPR\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)/],["edge",/Edge\/([0-9\.]+)/],["safari",/Version\/([0-9\.]+).+Safari/],["chrome",/Chrome\/([0-9\.]+)/],["ie",/MSIE ([0-9]+)/],["ie",/Trident\/.+rv:([0-9]+)/]],o=0;o<i.length;o++)if(e.match(i[o][1])){n=i[o][0],r=parseFloat(RegExp.$1);break}for(t.name=n,t.version=r,n="other",i=[["ios",/([0-9_]+) like Mac OS X/,function(e){return e.replace("_",".").replace("_","")}],["ios",/CPU like Mac OS X/,function(e){return 0}],["wp",/Windows Phone ([0-9\.]+)/,null],["android",/Android ([0-9\.]+)/,null],["mac",/Macintosh.+Mac OS X ([0-9_]+)/,function(e){return e.replace("_",".").replace("_","")}],["windows",/Windows NT ([0-9\.]+)/,null],["bb",/BlackBerry.+Version\/([0-9\.]+)/,null],["bb",/BB[0-9]+.+Version\/([0-9\.]+)/,null],["linux",/Linux/,null],["bsd",/BSD/,null],["unix",/X11/,null]],o=r=0;o<i.length;o++)if(e.match(i[o][1])){n=i[o][0],r=parseFloat(i[o][2]?i[o][2](RegExp.$1):RegExp.$1);break}"mac"==n&&"ontouchstart"in window&&(1024==screen.width&&1366==screen.height||834==screen.width&&1112==screen.height||810==screen.width&&1080==screen.height||768==screen.width&&1024==screen.height)&&(n="ios"),t.os=n,t.osVersion=r,t.touch="wp"==t.os?0<navigator.msMaxTouchPoints:!!("ontouchstart"in window),t.mobile="wp"==t.os||"android"==t.os||"ios"==t.os||"bb"==t.os}};return t.init(),t}();!function(e,n){"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?module.exports=n():e.browser=n()}(this,function(){return browser});

/* 
Obtains and detects information about the user's browser, OS, and capabilities 


This code defines a JavaScript utility, browser.js, that detects and provides information about the user's browser, operating system, and capabilities. This utility can be helpful for applying specific styles or functionalities based on the browser or device characteristics.

Code Breakdown
Module Definition:

Uses an Immediately Invoked Function Expression (IIFE) to create a browser object that encapsulates logic in a local scope. It also supports AMD and CommonJS module formats for compatibility across different environments.
Properties:

name and version: Stores the browser name and version.
os and osVersion: Stores the operating system name and version.
touch: Boolean indicating if the device supports touch.
mobile: Boolean indicating if the device is mobile (e.g., Android, iOS).
_canUse and canUse: _canUse holds a test element for checking CSS property support, and canUse determines if a CSS property (like transform or transition) is supported, with vendor prefix handling.
init Function:

Uses the navigator.userAgent string to identify the browser and its version. It iterates over an array of regex patterns for different browsers, assigning values to name and version upon a match.
Identifies the operating system and version by matching regex patterns for common OSs, including iOS, Android, Windows, macOS, and Linux.
Special handling for iOS devices is implemented to recognize specific screen dimensions.
Determines if the device is touch-capable by checking ontouchstart or navigator.msMaxTouchPoints.
Browser/OS Detection:

Checks for common browsers (Chrome, Safari, Firefox, etc.) and common OSs (iOS, Android, macOS, Windows, etc.) and sets the relevant properties.
It can adjust for certain screen sizes and specific device features to differentiate between similar OSs (e.g., macOS vs. iOS on touch devices).
Export:

The module exports the browser object, providing access to device, browser, and OS details.


if (browser.mobile) {
    console.log("Mobile device detected");
}

if (browser.canUse('transform')) {
    console.log("CSS transform is supported");
}

Key Advantages
Cross-Browser Compatibility: Simplifies compatibility handling by identifying the user's browser and OS.
Feature Detection: The canUse method allows feature detection for specific CSS properties, which can be essential for progressive enhancement.
Responsive Design Enhancements: Differentiates mobile devices and touch capabilities, enabling you to tailor user experiences based on device type.


*/